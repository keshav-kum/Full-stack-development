1. Write a simple program in HTML  that displays the heading "HTML defines the content and structure of your website" on the web browser?
 
 Answer:
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple heading title</title>
</head>
<body>
    <h1>HTML defines the content and structure of your website</h1>
</body>
</html>

2. Explain the purpose of comments in HTML and provide an example of how to use comments in an HTML document?

Answer:
Comments in HTML are used to reminders within the code that are not displayed in the browser. we can add notes. It's help developers to maintain or collaborate with others. 

Purpose of Comments in HTML:

Documentation: If any other developers are working in same code then he can understand easily.

Debugging: Comments can be used to temporarily disable parts of the code during testing or debugging without deleting them.

Organization: Comments help us to organized code by sepearating section by section.

Example of Using Comments in an HTML Document:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Example of HTML Comments</title>
</head>
<body>
    <!-- Main heading of the page -->
    <h1>Welcome to My portfolio</h1>

    <!-- Introduction section -->
    <p>Well this is keshav kumar, I am from muzaffarpur that is in bihar. </p>

    <!-- 
        The following section will contain links to other pages.
        This is a placeholder for future content.
    -->
    <div>
        <h2>Links</h2>
        <ul>
            <li><a href="about.html">About Us</a></li>
            <li><a href="contact.html">Contact</a></li>
        </ul>
    </div>

    <!-- Footer section -->
    <footer>
        <p>&copy; 2024 My Portfolio. All rights reserved.</p>
    </footer>
</body>
</html>

3.Write an HTML program that includes a heading, a paragraph of text, a horizontal line, and a line break. Arrange these elements to create a simple web page layout.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Web Page Layout</title>
</head>
<body>
    <!-- Main Heading -->
    <h1>Welcome to My eCommerce website</h1>

    <!-- Paragraph of text -->
    <p>
    Here you can purchase any clothes whatever you want like shirt,jeans,cargo jeans, formal pant what you like . you can purchage it.
    </p>

    <!-- Horizontal Line -->
    <hr>

    <!-- Additional Content with Line Break -->
    <p>
        apart from the clothes you can also purchase shoes. 
        <br>
        If you want to any cloths then you can pay money or cash delivery is also there in our website.
    </p>
</body>
</html>

4. Write a short note on Tag and element with an example?

Answer:
Tag : A tag is a basic component of HTML used to define or describe content. Tags are enclosed in angle brackets. There are two main types of tags:

. Opening tag: Marks the beginning of an element. For example, `<p>` starts a paragraph.
. Closing tag: Marks the end of an element. It is similar to the opening tag but includes a forward slash (`/`). For example, `</p>` ends the paragraph.

Elemnent: An element is a combination of an opening tag, content, and a closing tag. The element defines a part of the document structure. For instance, a paragraph element consists of an opening `<p>` tag, the text of the paragraph, and a closing `</p>` tag.

Here is example of element: 
                             <p>This is a paragraph.</p>

                             In this example:

                            . `<p>` is the opening tag.
                            . `This is a paragraph.` is the content.
                            . `</p>` is the closing tag.


5. What is the  DOCTYPE Declaration in HTML?

Answer:
DOCTYPE Declaration : this declaration defines the documet type and version of html being used.

Key Points :

. The `<!DOCTYPE>` declaration does not have a closing tag and is not an HTML element; it is a declaration.
. For HTML5, it is designed to be simple and easy to remember, making it accessible for all levels of web development.

.Core HTMl

1.Build a simple webpage that displays text as shown in the below image.

Answer:

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> First Assignment of jawascript</title>
</head>

<body>
    <p><b>this text will be bolder</b></p>
    <p><i>this text will be italic</i></p>
    <p><mark>this text will be highlighted</mark></p>
    <p>this is normal text <sup>this will be super scripted</sup> This is normal again</p>
    <p>this is normal text <sub>this text will be subscripted</sub></p>
    <p>Normal text <small>small text</small></p>
    <p><del>this text will be deleted</del></p>
</body>
</html>

2.Build a s
imple webpage that hepls users navigate different web developement-related websites. Note:on clicking the hyperlink the web pages should open in a new tab. Below is reference image.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> First Assignment of jawascript</title>
</head>
<body>
   
    <h1>Navigate Me:</h1>

    <p>Take me to <a href="https://pwskills.com/">PW Skills</a></p>
    <p>Take me <a href="https://developer.mozilla.org/en-US/docs/Learn">MDN docs</a> to know more about Web Developmemt</p>
    <p>Take me to <a href="https://lab.pwskills.com/">PW Skills Lab</a>to practice live coding.</p>

</body>
</html>

3. Build a simple blog web page with 3 pages home, web deveplopment, and web design. Each page must contain hyperlniks to other pages in the top, a heading of the page topic and a paragraph of information.For the home page you can adds some information about yourself.

Answer:

                    Home Page (index.html)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - My Blog</title>
    <style>
        nav a {
            margin: 0 10px;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <nav>
        <a href="index.html">Home</a>
        <a href="web-development.html">Web Development</a>
        <a href="web-design.html">Web Design</a>
    </nav>
    <h1>Welcome to My Blog</h1>
    <p>Hello! I'm [Your Name], a passionate web developer and designer. This blog is a place where I share my knowledge, experiences, and insights on web development and design. Stay tuned for tips, tutorials, and more!</p>
</body>
</html>

                      Web Development Page (web-development.html)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Development - My Blog</title>
    <style>
        nav a {
            margin: 0 10px;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <nav>
        <a href="index.html">Home</a>
        <a href="web-development.html">Web Development</a>
        <a href="web-design.html">Web Design</a>
    </nav>
    <h1>Web Development</h1>
    <p>Web development involves creating and maintaining websites. It includes aspects such as web design, web publishing, web programming, and database management. Web development can range from creating simple static pages to complex web applications.</p>
</body>
</html>

                               Web Design Page (web-design.html)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Design - My Blog</title>
    <style>
        nav a {
            margin: 0 10px;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <nav>
        <a href="index.html">Home</a>
        <a href="web-development.html">Web Development</a>
        <a href="web-design.html">Web Design</a>
    </nav>
    <h1>Web Design</h1>
    <p>Web design is the process of creating the visual aspects of a website. It involves planning and creating the layout, color scheme, typography, and other visual elements to provide a cohesive user experience. Good web design is essential for creating engaging and accessible websites.</p>
</body>
</html>


4. Create an ordered list of html tags. Each list item must include the tag name and some information about the tag.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML Tags Information</title>
</head>
<body>
    <h1>HTML Tags Information</h1>
    <ol>
        <li>
            <strong>&lt;html&gt;</strong> - The root element of an HTML document. It wraps all other elements and signifies the beginning and end of the document.
        </li>
        <li>
            <strong>&lt;head&gt;</strong> - Contains meta-information about the HTML document, such as its title and links to stylesheets.
        </li>
        <li>
            <strong>&lt;title&gt;</strong> - Defines the title of the document, which is displayed in the browser's title bar or tab.
        </li>
        <li>
            <strong>&lt;meta&gt;</strong> - Provides metadata about the HTML document, such as the character set, author, and description. It is an empty element.
        </li>
        <li>
            <strong>&lt;link&gt;</strong> - Defines the relationship between the current document and an external resource, commonly used to link to stylesheets. It is an empty element.
        </li>
        <li>
            <strong>&lt;script&gt;</strong> - Used to embed or reference executable scripts, such as JavaScript.
        </li>
        <li>
            <strong>&lt;style&gt;</strong> - Contains CSS styles to apply to the HTML document.
        </li>
        <li>
            <strong>&lt;body&gt;</strong> - Contains the content of an HTML document, such as text, images, and other media.
        </li>
        <li>
            <strong>&lt;h1&gt; to &lt;h6&gt;</strong> - Define HTML headings, with &lt;h1&gt; being the highest (or most important) level and &lt;h6&gt; the lowest.
        </li>
        <li>
            <strong>&lt;p&gt;</strong> - Represents a paragraph of text.
        </li>
        <li>
            <strong>&lt;a&gt;</strong> - Defines a hyperlink, which is used to link from one page to another.
        </li>
        <li>
            <strong>&lt;img&gt;</strong> - Embeds an image into an HTML document. It is an empty element.
        </li>
        <li>
            <strong>&lt;ul&gt;</strong> - Defines an unordered list of items.
        </li>
        <li>
            <strong>&lt;ol&gt;</strong> - Defines an ordered list of items.
        </li>
        <li>
            <strong>&lt;li&gt;</strong> - Defines a list item within an unordered or ordered list.
        </li>
        <li>
            <strong>&lt;div&gt;</strong> - A generic container for flow content, used for styling or grouping content.
        </li>
        <li>
            <strong>&lt;span&gt;</strong> - A generic inline container for text, used for styling or grouping text within other elements.
        </li>
        <li>
            <strong>&lt;form&gt;</strong> - Defines an HTML form for user input.
        </li>
        <li>
            <strong>&lt;label&gt;</strong> - The &lt;label&gt; element is used to associate a text label with a form &lt;label&gt; field.
        </li>
        <li>
            <strong>&lt;input&gt;</strong> - Defines an input field within a form. It is an empty element.
        </li>
        <li>
            <strong>&lt;button&gt;</strong> - Represents a clickable button.
        </li>
    </ol>
</body>
</html>

5. create a description list of full stack web development teck, using he <dl> tag. Each term should be a tech stack name and each description should be a brief explanation of what the tech stack is used for.

Answer:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> First Assignment of jawascript</title>
</head>
    <dl>
        <dt>HTML</dt>
        <dd>HTML (HyperText Markup Language) is the standard markup language used for creating web pages. It provides the structure of a webpage.</dd>
      
        <dt>CSS</dt>
        <dd>CSS (Cascading Style Sheets) is used for describing the presentation of a document written in HTML. It controls the layout, colors, and fonts.</dd>
      
        <dt>JavaScript</dt>
        <dd>JavaScript is a programming language that allows you to implement complex features on web pages, including dynamic content, interactive forms, and animations.</dd>
      
        <dt>Node.js</dt>
        <dd>Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. It allows developers to run JavaScript on the server side to build scalable network applications.</dd>
      
        <dt>Express.js</dt>
        <dd>Express.js is a web application framework for Node.js, designed for building web applications and APIs. It provides a robust set of features for web and mobile applications.</dd>
      
        <dt>React</dt>
        <dd>React is a JavaScript library for building user interfaces, maintained by Facebook. It allows developers to create large web applications that can update and render efficiently in response to data changes.</dd>
      
        <dt>Angular</dt>
        <dd>Angular is a platform and framework for building single-page client applications using HTML and TypeScript. It provides a set of tools and libraries for building and scaling web applications.</dd>
      
        <dt>Vue.js</dt>
        <dd>Vue.js is a progressive JavaScript framework for building user interfaces. It is designed to be incrementally adaptable, focusing on the view layer only.</dd>
      
        <dt>MongoDB</dt>
        <dd>MongoDB is a NoSQL database that uses a document-oriented data model. It allows for the storage of JSON-like documents with dynamic schemas.</dd>
        <dt>Git</dt>
        <dd>Git is a distributed version control system that tracks changes in source code during software development. It allows multiple developers to work together on non-linear development.</dd>
      
        <dt>GitHub</dt>
        <dd>GitHub is a web-based platform that uses Git for version control and provides tools for collaboration, such as issue tracking, code review, and project management.</dd>
      </dl>
      
</body>
</htm>

6.Create an ordered list of the full stack web development tech stack Html, CSS, and Js. For each tech stack, create a table that lists the tech stack name, its primary use cases, and some key features or benefits.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Full Stack Web Development Tech Stack</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1, h2 {
            color: #333;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
    </style>
</head>
<body>

    <h1>Full Stack Web Development Tech Stack</h1>

    <ol>
        <li>
            <h2>HTML (HyperText Markup Language)</h2>
            <table>
                <tr>
                    <th>Tech Stack Name</th>
                    <th>Primary Use Cases</th>
                    <th>Key Features/Benefits</th>
                </tr>
                <tr>
                    <td>HTML</td>
                    <td>Structuring web content, creating web pages</td>
                    <td>
                        <ul>
                            <li>Defines the structure of web pages using markup</li>
                            <li>Supports multimedia elements like images and videos</li>
                            <li>Establishes a hierarchy of elements with headings, paragraphs, etc.</li>
                            <li>Provides the foundation for web accessibility</li>
                            <li>Easy to learn and implement</li>
                        </ul>
                    </td>
                </tr>
            </table>
        </li>
        <li>
            <h2>CSS (Cascading Style Sheets)</h2>
            <table>
                <tr>
                    <th>Tech Stack Name</th>
                    <th>Primary Use Cases</th>
                    <th>Key Features/Benefits</th>
                </tr>
                <tr>
                    <td>CSS</td>
                    <td>Styling web pages, layout control, responsive design</td>
                    <td>
                        <ul>
                            <li>Controls the visual presentation of web content</li>
                            <li>Supports responsive design for various screen sizes</li>
                            <li>Enables separation of content and presentation</li>
                            <li>Allows for reusable style definitions through classes and IDs</li>
                            <li>Supports animations and transitions</li>
                        </ul>
                    </td>
                </tr>
            </table>
        </li>
        <li>
            <h2>JavaScript</h2>
            <table>
                <tr>
                    <th>Tech Stack Name</th>
                    <th>Primary Use Cases</th>
                    <th>Key Features/Benefits</th>
                </tr>
                <tr>
                    <td>JavaScript</td>
                    <td>Client-side scripting, dynamic content, interactivity</td>
                    <td>
                        <ul>
                            <li>Enables dynamic and interactive web content</li>
                            <li>Supports asynchronous operations through promises and async/await</li>
                            <li>Can manipulate HTML and CSS to update web pages dynamically</li>
                            <li>Extensive ecosystem with libraries and frameworks like React, Angular</li>
                            <li>Compatible with all modern browsers</li>
                        </ul>
                    </td>
                </tr>
            </table>
        </li>
    </ol>

</body>
</html>

7. Build a complex nested list structure representing a multi-level table of contents. Use unordered lists (<ul>) and list items (<li>) with inline-block styling to create a structure layout. Apply fomatting tags to enhance the presentation of lst items.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Complex Nested List Structure</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        ul {
            list-style-type: none;
            padding-left: 20px;
        }
        li {
            display: inline-block;
            padding: 5px 0;
            position: relative;
        }
        li::before {
            content: '•';
            position: absolute;
            left: -15px;
            color: #333;
        }
        h2, h3, h4 {
            margin: 10px 0;
            color: #333;
        }
        li > ul {
            margin-top: 5px;
        }
    </style>
</head>
<body>

    <h2>Table of Contents</h2>
    <ul>
        <li>
            <h3>Chapter 1: Introduction</h3>
            <ul>
                <li>
                    <h4>1.1 Overview</h4>
                </li>
                <li>
                    <h4>1.2 Goals</h4>
                    <ul>
                        <li>1.2.1 Objective 1</li>
                        <li>1.2.2 Objective 2</li>
                    </ul>
                </li>
                <li>
                    <h4>1.3 Structure</h4>
                </li>
            </ul>
        </li>
        <li>
            <h3>Chapter 2: HTML Basics</h3>
            <ul>
                <li>
                    <h4>2.1 Elements</h4>
                    <ul>
                        <li>2.1.1 Paragraphs</li>
                        <li>2.1.2 Headings</li>
                        <li>2.1.3 Lists</li>
                    </ul>
                </li>
                <li>
                    <h4>2.2 Attributes</h4>
                </li>
                <li>
                    <h4>2.3 Forms</h4>
                    <ul>
                        <li>2.3.1 Input Types</li>
                        <li>2.3.2 Validation</li>
                        <li>2.3.3 Required </li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            <h3>Chapter 3: CSS Styling</h3>
            <ul>
                <li>
                    <h4>3.1 Selectors</h4>
                    <ul>
                        <li>3.1.1 Class Selectors</li>
                        <li>3.1.2 ID Selectors</li>
                        <li>3.1.3 pseudo class </li>
                    </ul>
                </li>
                <li>
                    <h4>3.2 Box Model</h4>
                    <ul>
                        <li>3.2.1 Margins</li>
                        <li>3.2.2 Padding</li>
                        <li>3.2.3 Borders</li>
                    </ul>
                </li>
                <li>
                    <h4>3.3 Flexbox</h4>
                </li>
            </ul>
        </li>
        <li>
            <h3>Chapter 4: JavaScript Fundamentals</h3>
            <ul>
                <li>
                    <h4>4.1 Variables</h4>
                </li>
                <li>
                    <h4>4.2 Functions</h4>
                    <ul>
                        <li>4.2.1 Function Declarations</li>
                        <li>4.2.2 Function Expressions</li>
                        <li>4.3.3 function asynchronous </li>
                    </ul>
                </li>
                <li>
                    <h4>4.3 Events</h4>
                    <ul>
                        <li>4.3.1 Event Listeners</li>
                        <li>4.3.2 Event Bubbling</li>
                        <li>4.3.3 Event delegation<li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>

</body>
</html>

8. Create a table to display a conference shedule. Each row corresponds to a time slot, and each column corressponds to a room. Some time slots might have multiple sessions running simultaneously in different rooms. Utilize rowspan and colspan attributes as necessary to accommodate this complex shedule.(use table attribute "cellpadding" to give extra padding in each table cell).

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conference Schedule</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            border: 1px solid #ddd;
            cellpadding: 10;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }
        th {
            background-color: #f4f4f4;
        }
    </style>
</head>
<body>

    <h2>Conference Schedule</h2>
    <table cellpadding="10">
        <thead>
            <tr>
                <th>Time</th>
                <th>Room A</th>
                <th>Room B</th>
                <th>Room C</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>09:00 - 10:00</td>
                <td colspan="3">Keynote Address</td>
            </tr>
            <tr>
                <td>10:00 - 11:00</td>
                <td>Session A1</td>
                <td>Session B1</td>
                <td rowspan="2">Workshop C1</td>
            </tr>
            <tr>
                <td>11:00 - 12:00</td>
                <td>Session A2</td>
                <td>Session B2</td>
            </tr>
            <tr>
                <td>12:00 - 13:00</td>
                <td colspan="3">Lunch Break</td>
            </tr>
            <tr>
                <td>13:00 - 14:00</td>
                <td rowspan="2">Workshop A2</td>
                <td>Session B3</td>
                <td>Session C2</td>
            </tr>
            <tr>
                <td>14:00 - 15:00</td>
                <td>Session B4</td>
                <td>Session C3</td>
            </tr>
            <tr>
                <td>15:00 - 16:00</td>
                <td>Session A3</td>
                <td colspan="2">Panel Discussion</td>
            </tr>
            <tr>
                <td>16:00 - 17:00</td>
                <td>Session A4</td>
                <td>Session B5</td>
                <td>Session C4</td>
            </tr>
        </tbody>
    </table>

</body>
</html>

           Media and Forms

1. Create an image gallery that holds muliple images.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Gallery</title>
</head>
<body>
    <div class="gallery-container">
        <div class="gallery-item">
            <img src="image1.jpg" alt="Image 1">
        </div>
        <div class="gallery-item">
            <img src="image2.jpg" alt="Image 2">
        </div>
        <div class="gallery-item">
            <img src="image3.jpg" alt="Image 3">
        </div>
        <div class="gallery-item">
            <img src="image4.jpg" alt="Image 4">
        </div>
        <div class="gallery-item">
            <img src="image5.jpg" alt="Image 5">
        </div>
        <div class="gallery-item">
            <img src="image6.jpg" alt="Image 6">
        </div>
        <div class="gallery-item">
            <img src="image7.jpg" alt="Image 7">
        </div>
        <div class="gallery-item">
            <img src="image8.jpg" alt="Image 8">
        </div>
    </div>
</body>
</html>

2. Use video and audio tags to display video and audio with the playback, audio control

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Example</title>
</head>
<body>
    <h1>Video Example</h1>
    <video width="640" height="360" controls>
        <source src="movie.mp4" type="video/mp4">
        <source src="movie.ogg" type="video/ogg">
        Your browser does not support the video tag.
    </video>

    <h1>The audio element</h1>

<p>Click on the play button to play a sound:</p>

<audio controls>
  <source src="horse.ogg" type="audio/ogg">
  <source src="horse.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>
    
</body>
</html>


3. Modify the previous assignment so that the audio and video play automatically as the page is loaded and they should play infinitely.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Example</title>
</head>
<body>
    <h1>Video Example</h1>
    <video width="640" height="360" controls autoplay loop >
        <source src="movie.mp4" type="video/mp4">
        <source src="movie.ogg" type="video/ogg">
        Your browser does not support the video tag.
    </video>

    <h1>The audio element</h1>

<p>Click on the play button to play a sound:</p>

<audio controls autoplay loops>
  <source src="horse.ogg" type="audio/ogg">
  <source src="horse.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>
    
</body>
</html>

4. Use iframe to embed the PhysicsWallah Wikipedia page properly

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PhysicsWallah Wikipedia</title>
    <style>
        iframe {
            width: 100%;
            height: 100vh; /* Full viewport height */
            border: none;
        }
    </style>
</head>
<body>
    <h1>PhysicsWallah Wikipedia Page</h1>
    <iframe src="https://en.wikipedia.org/wiki/PhysicsWallah" title="PhysicsWallah Wikipedia Page"></iframe>
</body>
</html>

5. Create a sign-up and sign-in form with proper Validation
a. Sign up form should have a first name, last name, email, password, confirm password, age, gender, and agree to terms and conditions fields at minimum (you can add any other if you like)
b. Sign in form should have email, password fields
Note: Validation is a must.
Ex: First name, last name, email cannot be less than 3 charracters, age cannot be negative and cannot be greater than 150, fields are required, etc...,

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign-Up and Sign-In Forms</title>
    <style>
        form {
            margin: 20px;
            max-width: 400px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        label {
            display: block;
            margin: 10px 0 5px;
        }
        input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
        }
        .error {
            color: red;
            font-size: 0.9em;
        }
        .form-container {
            display: flex;
            justify-content: space-between;
        }
    </style>
</head>
<body>
    <h1>Sign-Up Form</h1>
    <form id="signup-form">
        <label for="first-name">First Name:</label>
        <input type="text" id="first-name" name="first-name" required minlength="3">
        
        <label for="last-name">Last Name:</label>
        <input type="text" id="last-name" name="last-name" required minlength="3">
        
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required minlength="6">
        
        <label for="confirm-password">Confirm Password:</label>
        <input type="password" id="confirm-password" name="confirm-password" required minlength="6">
        
        <label for="age">Age:</label>
        <input type="number" id="age" name="age" required min="0" max="150">
        
        <label>Gender:</label>
        <div class="form-container">
            <label><input type="radio" name="gender" value="male" required> Male</label>
            <label><input type="radio" name="gender" value="female" required> Female</label>
            <label><input type="radio" name="gender" value="other" required> Other</label>
        </div>
        
        <label>
            <input type="checkbox" id="terms" name="terms" required> I agree to the terms and conditions
        </label>
        
        <button type="submit">Sign Up</button>
    </form>

    <h1>Sign-In Form</h1>
    <form id="signin-form">
        <label for="signin-email">Email:</label>
        <input type="email" id="signin-email" name="signin-email" required>
        
        <label for="signin-password">Password:</label>
        <input type="password" id="signin-password" name="signin-password" required minlength="6">
        
        <button type="submit">Sign In</button>
    </form>
</body>
</html>


          Starting With CSS

1.Create a simple page with some div tags and show different ways to add CSS as well as what happens when you target the same elements with inline, itnernal, and external CSS. also utilize comments in the project where required.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Priority Example</title>
    <!-- Internal CSS -->
    <style>
        /* This is an internal CSS block */
        .example-div {
            background-color: lightblue; /* This will be overridden by external CSS */
            color: black; /* This will be overridden by inline CSS */
            border: 2px solid black;
        }
    </style>
    <!-- Link to External CSS -->
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Inline CSS -->
    <div class="example-div" style="color: red;">
        This is a div with inline CSS.
    </div>
    <div class="example-div">
        This is a div without inline CSS.
    </div>
</body>
</html>

/* This is an external CSS file */
.example-div {
    background-color: lightgreen; /* This will override internal CSS */
    padding: 20px;
    margin: 10px;
}
 
2. Build an HTML page with multiple paragraphs, each assigned a unique class name. Write CSS rules using class selectors to apply distinct styling to each paragraph. Follow the BEM naming convention and explain how you've names the classes.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BEM Naming Convention Example</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="content">
        <p class="content__paragraph content__paragraph--primary">This is the primary paragraph.</p>
        <p class="content__paragraph content__paragraph--secondary">This is the secondary paragraph.</p>
        <p class="content__paragraph content__paragraph--highlighted">This is the highlighted paragraph.</p>
        <p class="content__paragraph content__paragraph--muted">This is the muted paragraph.</p>
    </div>
</body>
</html>

/* Base block styles */
.content {
    margin: 20px;
    padding: 10px;
    border: 1px solid #ccc;
}

/* Element styles */
.content__paragraph {
    margin-bottom: 15px;
    padding: 10px;
    font-size: 16px;
    line-height: 1.5;
}

/* Modifier styles */
.content__paragraph--primary {
    color: white;
    background-color: blue;
}

.content__paragraph--secondary {
    color: white;
    background-color: green;
}

.content__paragraph--highlighted {
    color: black;
    background-color: yellow;
    font-weight: bold;
}

.content__paragraph--muted {
    color: gray;
    background-color: lightgray;
}

3. Develop an HTML form with various input elements. Use CSS to style the form, including setting background colors for input fields. Create a custom color palette for the form elements, and demonstrate how to apply opacity to one of the form sections

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Styled Form Example</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="form-container">
        <form action="#" method="post">
            <h2 class="heading">Contact Us</h2>
            
            <div class="form-section form-section--primary">
                <label for="name" class="form-label">Name:</label>
                <input type="text" id="name" name="name" class="form-input">

                <label for="email" class="form-label">Email:</label>
                <input type="email" id="email" name="email" class="form-input">

                <label for="phone" class="form-label">Phone:</label>
                <input type="tel" id="phone" name="phone" class="form-input">
            </div>

            <div class="form-section form-section--secondary">
                <label for="message" class="form-label">Message:</label>
                <textarea id="message" name="message" class="form-textarea"></textarea>
            </div>

            <div class="form-section form-section--tertiary">
                <label for="gender" class="form-label">Gender:</label>
                <select id="gender" name="gender" class="form-select">
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                </select>

                <label class="form-label">Subscribe to Newsletter:</label>
                <input type="checkbox" id="subscribe" name="subscribe" class="form-checkbox">
                <label for="subscribe" class="form-checkbox-label">Yes, subscribe me</label>
            </div>

            <button type="submit" class="form-button">Submit</button>
        </form>
    </div>
</body>
</html>

/* Custom color palette */
:root {
    --primary-color: #4CAF50;
    --secondary-color: #2196F3;
    --tertiary-color: #FFC107;
    --background-color: #f0f0f0;
    --input-background-color: #ffffff;
    --input-border-color: #cccccc;
    --button-color: #4CAF50;
    --button-hover-color: #45a049;
}

/* General form styles */
body {
    font-family: Arial, sans-serif;
    background-color: var(--background-color);
    padding: 20px;
}

.form-container {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    margin: auto;
}

.heading {
    text-align: center;
    color: var(--primary-color);
    margin-bottom: 20px;
}

.form-section {
    margin-bottom: 20px;
}

/* Apply opacity to the secondary section */
.form-section--secondary {
    background-color: var(--secondary-color);
    padding: 15px;
    border-radius: 5px;
    opacity: 0.9; /* Applying opacity */
}

.form-label {
    display: block;
    margin-bottom: 5px;
    color: var(--primary-color);
}

.form-input,
.form-textarea,
.form-select {
    width: 100%;
    padding: 13px;
    margin-bottom: 10px;
    border: 1px solid var(--input-border-color);
    border-radius: 7px;
    background-color: var(--input-background-color);
}

.form-textarea {
    height: 100px;
    resize: vertical;
}

.form-checkbox-label {
    margin-left: 5px;
    color: var(--primary-color);
}

.form-button {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 7px;
    background-color: var(--button-color);
    color: white;
    font-size: 19px;
    cursor: pointer;
}

.form-button:hover {
    background-color: var(--button-hover-color);
}

         More on CSS

1.Creating a navigation bar similar to the below-mention image. The navigatioon bar must contain 5 navigation links that are properly placed within the navigation bar using the CSS box model. The navigation items must change their text color on hover.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Navigation Bar Example</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav class="navbar">
        <ul class="navbar__list">
            <li class="navbar__item"><a href="#" class="navbar__link">Home</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link">About</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link">Services</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link">Portfolio</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link">Contact</a></li>
        </ul>
    </nav>
</body>
</html>

/* Custom color palette */
:root {
    --navbar-bg-color: #333;
    --navbar-link-color: #fff;
    --navbar-link-hover-color: #ff6347;
    --navbar-link-padding: 15px 20px;
}

/* Navigation bar styles */
body {
    margin: 0;
    font-family: Arial, sans-serif;
}

.navbar {
    background-color: var(--navbar-bg-color);
    padding: 10px 0;
}

.navbar__list {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
}

.navbar__item {
    margin: 0;
}

.navbar__link {
    display: block;
    color: var(--navbar-link-color);
    text-decoration: none;
    padding: var(--navbar-link-padding);
    transition: color 0.3s;
}

/* Hover effect */
.navbar__link:hover {
    color: var(--navbar-link-hover-color);
}

2. Create a div centered with an image and paragraph similar to the image mention below.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>centered image and paragraph</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="div-container">
        <img src="example-image.jpg" alt="Example Image" class="div-image">
        <p class="div-paragraph">This is a centered paragraph below the image.</p>
    </div>
</body>
</html>

/* General styles */
body {
    margin: 0;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

/* Centered container styles */
.div-container {
    text-align: center;
    padding: 20px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
}

/* Image styles */
.div-image {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto 20px;
}

/* Paragraph styles */
.div-paragraph {
    margin: 0;
    color: #333;
}

3. Create a navigation bar similar to qustion1. For each navigation item, use a different border style.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Navigation Bar Example</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav class="navbar">
        <ul class="navbar__list">
            <li class="navbar__item"><a href="#" class="navbar__link navbar__link--primary">Home</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link navbar__link--secondary">About</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link navbar__link--third">Services</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link navbar__link--four">Portfolio</a></li>
            <li class="navbar__item"><a href="#" class="navbar__link navbar__link--five">Contact</a></li>
        </ul>
    </nav>
</body>
</html>

* Custom color palette */
:root {
    --navbar-bg-color: #333;
    --navbar-link-color: #fff;
    --navbar-link-hover-color: #ff6347;
    --navbar-link-padding: 15px 20px;
}

/* Navigation bar styles */
body {
    margin: 0;
    font-family: Arial, sans-serif;
}

.navbar {
    background-color: var(--navbar-bg-color);
    padding: 10px 0;
}

.navbar__list {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
}

.navbar__item {
    margin: 0;
}

.navbar__link {
    display: block;
    color: var(--navbar-link-color);
    text-decoration: none;
    padding: var(--navbar-link-padding);
    transition: color 0.3s;
}

.navbar__link--primary {
    border: 2px solid black;
}

.navbar__link--secondary {
    border: 2px solid lightblue;
}

.navbar__link--third {
    border: 2px solid lightgreen;
}

.navbar__link--four {
    border: 2px solid red;
}

.navbar__link--five {
    border: 2px solid yellow;
}

/* Hover effect */
.navbar__link:hover {
    color: var(--navbar-link-hover-color);
}

4. Create a simple webpage with an image and make the image circular using border-radius.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Circular Image </title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="image-container">
        <img src="image1.png" class="first-image">
    </div>
</body>
</html>

/* General styles */
body {
    margin: 0;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f0f0f0;
    font-family: Arial, sans-serif;
}
.image-container {
    text-align: center;
}

.first-image {
    width: 200px;
    height: 200px;
    border-radius: 50%; /* This makes the image circular */
    object-fit: cover;
}

5. Create a simple blog website about Google fonts. The webpage must have the heading with "Oswald" font align center to the page, below the heading have an image of Google fonts and a paragraph about Google fonts in "Montserrat" paragraph font style should be "Montserrat" font.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Fonts Blog</title>
    <link rel="stylesheet" href="styles.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400&family=Oswald:wght@400&display=swap" rel="stylesheet">
</head>
<body>
    <div class="content">
        <h1 class="heading">Google Fonts</h1>
        <img src="https://fonts.google.com/images/google-fonts-logo.svg" alt="Google Fonts Logo" class="image">
        
        <p class="paragraph">Google Fonts is a library of 2,000+ free licensed font families and APIs for conveniently using the fonts via CSS and Android. The library also has beautifully crafted icons for common actions and items. The Google Fonts API makes it easy to bring the power of great typography to your website.</p>
    </div>
</body>
</html>

body {
    margin: 0;
    font-family: 'Montserrat', sans-serif;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 80vh;
}

.content {
    text-align: center;
    padding: 23px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    max-width: 600px;
}

.heading {
    font-family: 'Oswald', sans-serif;
    font-size: 2.5em;
    margin-bottom: 20px;
}

.image {
    max-width: 100%;
    height: auto;
    margin-bottom: 20px;
}

.paragraph {
    font-family: 'Montserrat', sans-serif;
    font-size: 1em;
    color: #333;
}

6. Create a simple website as mentioned in the below image. You can get the assets by visiting https:/pwskills.com/about-us.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - PW Skills</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>PW Skills</h1>
        <nav>
            <ul>
                <li><a href="index.html">Home</a></li>
                <li><a href="https:/pwskills.com/about-us">About Us</a></li>
                <li><a href="services.html">Services</a></li>
                <li><a href="contact.html">Contact</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="about-us">
            <h2>About Us</h2>
            <p>PW Skills is providing a lot of course in programming.Whatever you want to choose you can do. pwskills has full stack development course as well as data scientist and AI related .</p>
            <p>Any stream people can do  this course he will get all facility related industrial project</p>
            <p> To know about for information you can click our About Us page.</p>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 PW Skills. All rights reserved.</p>
    </footer>
</body>
</html>

7. Create a simple webpage with a card similar to question number2. The card must be semi-transparent as default and on hovering the card must be displayed clearly. Use CSS opacity to achieve this output.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>centered image and paragraph</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="div-container">
        <img src="tower.png" alt="tower Image" class="div-image">
        <p class="div-paragraph">This is a centered paragraph below the image.</p>
    </div>
</body>
</html>

body {
    margin: 0;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

/* Centered container styles */
.div-container {
    text-align: center;
    padding: 20px;
    background-color: rgb(80, 77, 77);
    border-radius: 5px;
}

/* Image styles */
.div-image {
    max-width: 70%;
    height: auto;
    display: block;
    margin: 0 auto 20px;
}
  /*Image hovering*? 
.div-image:hover{
    opacity: 0.5;
}

/* Paragraph styles */
.div-paragraph {
    margin: 0;
    color: #333;
}

8. Create a simple list of items as mentioned in the below image.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>List of items</title>
</head>
<body>
    <h1>Requirements</h1>
    <ol type="i">
        <li>System with minimum i3 processor or better.</li>
        <li>At least 4 GB of RAM.</li>
        <li>Working internet connection.</li>
        <li>Dedication to learn</li>
    </ol>
</body>
</html>

                  Position in CSS

Write code to position 5 equal-sized(50 * 50px) boxes A, B, C, D, and E as follows,
a. box A 200px from the left, and 200px from the top of the viewport.
b. Box B -30px left, and -30px above from the center of box A.
c. Box C -30px right, and -30px above from the center of box A.
d. Box D -30px left, and -30px below from the center of box A.
e. Box E -30px right, and -30px below from the center of box A.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Box Positioning</title>
    <style>
        .box {
            width: 50px;
            height: 50px;
            position: absolute;
        }

        #boxA {
            left: 200px;
            top: 200px;
            background-color: rgb(255, 128, 0);
            z-index: 1;
            text-align: center;

        }
        #boxB {
            left: calc(200px - 30px);
            top: calc(200px - 30px);
            background-color: green;
        }

        #boxC {
            left: calc(200px + 30px);
            top: calc(200px - 30px);
            background-color: blue;
        }

        #boxD {
            left: calc(200px - 30px);
            top: calc(200px + 30px);
            background-color: yellow;
        }

        #boxE {
            left: calc(200px + 30px);
            top: calc(200px + 30px);
            background-color: purple;
        }
    </style>
</head>
<body>
    <div id="boxA" class="box">A</div>
    <div id="boxB" class="box">B</div>
    <div id="boxC" class="box">C</div>
    <div id="boxD" class="box">D</div>
    <div id="boxE" class="box">E</div>
</body>
</html>

2. Explain the difference between Absolute and Relative positioning.

Answer:
Absolute: Positioned relative to the nearest positioned ancestor or the viewport.
Relative: Positioned relative to its normal position in the document flow.

3.Create a card as shown in the  picture below.(You can use CSS float property only for layout).

answer:
  <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Float Example</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="cart">
    <img src="tower.png" alt="tower example" class="tower-image">
    <p class="paragraph">
      this is one of the highest tower in the world. here you can go and watch. various country people go and feel good wathing this.
    </p>
  </div>
</body>
</html>

/* Container for the cart */
.cart {
    width: 600px;
    border: 1px solid #ddd;
    padding: 10px;
    margin: 20px;
    overflow: hidden; 
  }
  
  /* Image styling */
  .tower-image {
    float: right; 
    margin-right: 10px;
    width: 50%; 
    height: 50%;
  }
  
  /* Paragraph styling */
  .paragraph {
    text-align: center;
    padding-right: 13px;
  }

4. Create a simple header that sticks to the top of a webpage upon scrolling.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticky Header Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
        }
        .header {
            background-color: #333;
            color: white;
            padding: 7px 9px;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
        }
        .content {
            padding: 80px 20px; /* Add top padding to prevent content from being hidden under the header */
        }
        .header h1 {
            margin: 0;
        }
        ul{
           margin:5px;
           width:100%;
           padding:13px; 
        }
        li{
            text-decoration: none;
            color:antiquewhite;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="nav">
            <ul>
                <li>Home</li>
                <li>ABout </li>
                <li>Content</li>
                <li>Blog</li>
            </ul>
        </div>
    </div>
    <div class="Paragraph-1">
        <h1>Paragraph-1</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat. Aenean faucibus nibh et justo cursus id rutrum lorem imperdiet. Nunc ut sem vitae risus tristique posuere.</p>
        <p>Donec ultricies, orci sit amet imperdiet mattis, risus nunc pellentesque magna, eget facilisis libero justo in lectus. Sed vehicula ipsum quis lacus facilisis, at commodo erat efficitur. Nullam ac justo euismod, ultricies felis ac, laoreet dolor. Quisque malesuada, dui id gravida bibendum, metus sapien aliquet odio, nec ultricies odio risus et odio. Nulla facilisi.</p>
        <p>Mauris viverra purus id purus fringilla, nec tincidunt urna sollicitudin. Sed euismod orci erat, id fermentum dui malesuada a. Nam quis lorem et libero aliquet tincidunt. Nulla facilisi. Proin ac tellus sed lectus ultricies facilisis nec non orci. Donec malesuada felis eros, non vehicula nunc facilisis in. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Proin sed ex nec dui feugiat vehicula. Quisque condimentum dui vitae tortor accumsan dignissim.</p>
        <p>Nam consectetur elit eu sem luctus, ac facilisis eros dignissim. Morbi sodales ligula et dui convallis, a bibendum orci fermentum. Praesent nec libero vel libero consectetur vehicula. Pellentesque imperdiet tincidunt sapien, in mollis nisi bibendum ut. Curabitur ut mi a libero blandit fermentum. Donec euismod sem et libero tristique, at gravida elit efficitur. In a neque sit amet dolor sollicitudin convallis.</p>
        <p>Sed sit amet felis nec metus convallis viverra. Nulla facilisi. Aliquam erat volutpat. Etiam vestibulum velit id venenatis facilisis. Sed sollicitudin augue a gravida tincidunt. Sed ultricies nisi at malesuada iaculis. Fusce a felis sed turpis tempor elementum. Sed at justo nec justo accumsan accumsan.</p>
    </div>
    <div class="Paragraph-2">
        <h1>Paragraph-2</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat. Aenean faucibus nibh et justo cursus id rutrum lorem imperdiet. Nunc ut sem vitae risus tristique posuere.</p>
        <p>Donec ultricies, orci sit amet imperdiet mattis, risus nunc pellentesque magna, eget facilisis libero justo in lectus. Sed vehicula ipsum quis lacus facilisis, at commodo erat efficitur. Nullam ac justo euismod, ultricies felis ac, laoreet dolor. Quisque malesuada, dui id gravida bibendum, metus sapien aliquet odio, nec ultricies odio risus et odio. Nulla facilisi.</p>
        <p>Mauris viverra purus id purus fringilla, nec tincidunt urna sollicitudin. Sed euismod orci erat, id fermentum dui malesuada a. Nam quis lorem et libero aliquet tincidunt. Nulla facilisi. Proin ac tellus sed lectus ultricies facilisis nec non orci. Donec malesuada felis eros, non vehicula nunc facilisis in. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Proin sed ex nec dui feugiat vehicula. Quisque condimentum dui vitae tortor accumsan dignissim.</p>
        <p>Nam consectetur elit eu sem luctus, ac facilisis eros dignissim. Morbi sodales ligula et dui convallis, a bibendum orci fermentum. Praesent nec libero vel libero consectetur vehicula. Pellentesque imperdiet tincidunt sapien, in mollis nisi bibendum ut. Curabitur ut mi a libero blandit fermentum. Donec euismod sem et libero tristique, at gravida elit efficitur. In a neque sit amet dolor sollicitudin convallis.</p>
        <p>Sed sit amet felis nec metus convallis viverra. Nulla facilisi. Aliquam erat volutpat. Etiam vestibulum velit id venenatis facilisis. Sed sollicitudin augue a gravida tincidunt. Sed ultricies nisi at malesuada iaculis. Fusce a felis sed turpis tempor elementum. Sed at justo nec justo accumsan accumsan.</p>
    </div>
    <div class="Paragraph-3">
        <h1>Paragraph-3</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat. Aenean faucibus nibh et justo cursus id rutrum lorem imperdiet. Nunc ut sem vitae risus tristique posuere.</p>
        <p>Donec ultricies, orci sit amet imperdiet mattis, risus nunc pellentesque magna, eget facilisis libero justo in lectus. Sed vehicula ipsum quis lacus facilisis, at commodo erat efficitur. Nullam ac justo euismod, ultricies felis ac, laoreet dolor. Quisque malesuada, dui id gravida bibendum, metus sapien aliquet odio, nec ultricies odio risus et odio. Nulla facilisi.</p>
        <p>Mauris viverra purus id purus fringilla, nec tincidunt urna sollicitudin. Sed euismod orci erat, id fermentum dui malesuada a. Nam quis lorem et libero aliquet tincidunt. Nulla facilisi. Proin ac tellus sed lectus ultricies facilisis nec non orci. Donec malesuada felis eros, non vehicula nunc facilisis in. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Proin sed ex nec dui feugiat vehicula. Quisque condimentum dui vitae tortor accumsan dignissim.</p>
        <p>Nam consectetur elit eu sem luctus, ac facilisis eros dignissim. Morbi sodales ligula et dui convallis, a bibendum orci fermentum. Praesent nec libero vel libero consectetur vehicula. Pellentesque imperdiet tincidunt sapien, in mollis nisi bibendum ut. Curabitur ut mi a libero blandit fermentum. Donec euismod sem et libero tristique, at gravida elit efficitur. In a neque sit amet dolor sollicitudin convallis.</p>
        <p>Sed sit amet felis nec metus convallis viverra. Nulla facilisi. Aliquam erat volutpat. Etiam vestibulum velit id venenatis facilisis. Sed sollicitudin augue a gravida tincidunt. Sed ultricies nisi at malesuada iaculis. Fusce a felis sed turpis tempor elementum. Sed at justo nec justo accumsan accumsan.</p>
    </div>
</body>
</html>

6. Explain the z-index, with a code example.

Answer:
The z-index property in CSS is used to determine the stacking order of elements on a web page. Elements with a higher z-index value will be placed in front of elements with a lower z-index value. It only works on positioned elements.

           
                 Flexbox in CSS

1. Describe the main difference between the CSS Flexbox layout model and the CSS Grid layout When would you choose to use one over the other?

Answer:
Flexbox: Choose Flexbox when you need to control the layout of items in one dimension (either a row or a column) and you need flexibility for items of varying sizes. It is also preferable for simpler, less complex layouts.

Grid: Choose Grid when you need to manage both rows and columns simultaneously and require a more comprehensive layout solution. Grid is suitable for more complex and larger-scale designs where the layout involves multiple rows and columns.

2.Explain the role of the following key properties in the Flexbox layout mode

1. justify-content
2. aling-item
3. gap 
4. Flex-direction 
5. flex-wrap

Answer:
1.justify-content

Role: This property aligns the flex items along the main axis (which is horizontal by default). It distributes the extra space when the items do not take up all the available space.

2. align-items

Role: This property aligns the flex items along the cross axis (which is vertical by default). It sets the default alignment for all items inside the flex container.

3. gap

Role: This property defines the space between the flex items. It is used to create consistent spacing between items without using margins.

4. flex-direction

Role: This property defines the direction in which the flex items are placed in the flex container.

5. flex-wrap

Role: This property controls whether the flex items should wrap onto multiple lines or stay on a single line.


Q3. Write the code to center a div using CSS Flexbox.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Center a Div</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <div class="centered-div">Centered Content</div>
    </div>
</body>
</html>

html, body {
    height: 100%;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

.centered-div {
    padding: 20px;
    background-color: lightblue;
    border: 1px solid #000;
}


4. A client of yours wants to add a pricing section on their website to showcase their newly introduced premium palns. You have to build the pricing section for their business. They have provided you with the figma design for the same.link

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pricing Section</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <section class="pricing">
        <h1>Our plans</h1>
        <div class="pricing-cards">
            <div class="card">
            <h1>Free Plan<h1>
                <h2>For personal</h2>
                <p class="price">$0<span>/month</span></p>
                <ul>
                    <li>1 users</li>
                    <li>4 Web mails</li>
                    <li>Response Website</li>
                    <li> Free SSl </li>
                </ul>
                <button>Subscribe now</button>
            </div>
            <div class="card popular">
            <h1> Basic Plan </h2>
                <h2>For small buisiness</h2>
                <p class="price">$29<span>/month</span></p>
                <ul>
                    <li>4 users</li>
                    <li>10 Web mails</li>
                    <li>Responsive Website</li>
                    <li>Free SSL</li>
                </ul>
            <button>Choose Subscribe now</button>
            </div>
            <div class="card">
             <h1>Pro Plan </h2>
                <h2>For enterprise</h2>
                <p class="price">$49<span>/month</span></p>
                <ul>
                    <li>Unlimited Users</li>
                    <li>Unlimited Web mails</li>
                    <li>Responsive Website</li>
                    <li>Free SSL + SEO</li>
                </ul>
                <button>Subscribe now</button>
            </div>
        </div>
    </section>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
    margin: 0;
    padding: 0;
}

.pricing {
    text-align: center;
    padding: 50px 0;
    background-color: #ffffff;
}

.pricing h1 {
    font-size: 2.5em;
    margin-bottom: 20px;
}

.pricing-cards {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 20px;
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 20px;
}

.card {
    background-color: #ffffff;
    border: 1px solid #dddddd;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 300px;
    padding: 20px;
    transition: transform 0.3s, box-shadow 0.3s;
}

.card:hover {
    transform: translateY(-10px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

.card h2 {
    font-size: 1.5em;
    margin-bottom: 10px;
}

.price {
    font-size: 2em;
    margin: 20px 0;
}

.price span {
    font-size: 0.5em;
    color: #777777;
}

.card ul {
    list-style-type: none;
    padding: 0;
}

.card ul li {
    margin: 10px 0;
}

button {
    background-color: #007BFF;
    color: #ffffff;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

.popular {
    border: 2px solid #007BFF;
}

@media (max-width: 768px) {
    .pricing-cards {
        flex-direction: column;
        align-items: center;
    }

    .card {
        width: 80%;
        margin-bottom: 20px;
    }
}


Q5. build a clone of the IRCTC Ticket booking page

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IRCTC Ticket Booking</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>IRCTC Ticket Booking</h1>
    </header>
    <main>
        <form id="searchForm">
            <label for="from">From:</label>
            <input type="text" id="from" name="from" required>
            <label for="to">To:</label>
            <input type="text" id="to" name="to" required>
            <label for="date">Date:</label>
            <input type="date" id="date" name="date" required>
            <button type="submit">Search Trains</button>
        </form>
        <div id="results"></div>
    </main>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

header {
    background-color: #f5f5f5;
    padding: 20px;
    text-align: center;
}

main {
    padding: 20px;
}

form {
    display: flex;
    flex-direction: column;
    max-width: 400px;
    margin: auto;
}

label {
    margin-top: 10px;
}

input {
    padding: 10px;
    margin-top: 5px;
}

button {
    padding: 10px;
    margin-top: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

          Grid in CSS


1. Create an image gallery uisng a CSS grid.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Gallery</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="gallery">
        <div class="gallery-item"><img src="image1.jpg" alt="Image 1"></div>
        <div class="gallery-item"><img src="image2.jpg" alt="Image 2"></div>
        <div class="gallery-item"><img src="image3.jpg" alt="Image 3"></div>
        <div class="gallery-item"><img src="image4.jpg" alt="Image 4"></div>
        <div class="gallery-item"><img src="image5.jpg" alt="Image 5"></div>
        <div class="gallery-item"><img src="image6.jpg" alt="Image 6"></div>
    </div>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

.gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 10px;
    padding: 10px;
}

.gallery-item img {
    width: 100%;
    height: auto;
    display: block;
    border-radius: 8px;
}

2. Write code to arrange containers with texts A,B,C and D as shown in the below image.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Grid</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="grid-container">
        <div class="grid-item grid-item1" >A</div>
        <div class="grid-item grid-item2">B</div>
        <div class="grid-item">C</div>
        <div class="grid-item">D</div>
    </div>
</body>
</html>

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f4f4f4;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  grid-template-rows: repeat(2, 100px);
  gap: 10px;
}

.grid-item1{
  grid-column-end: span 2;
}
.grid-item2{
  grid-row: 2/span 2;
}
.grid-item {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #4CAF50;
  color: white;
  font-size: 24px;
  border-radius: 5px;
}

3. Explain the use of grid-auto-row and grid-auto-column using code example.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grid Auto Rows and Columns Example</title>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: 100px 100px;
            grid-template-rows: 100px;
            grid-auto-rows: 50px;
            grid-auto-columns: 50px;
            gap: 10px;
        }

        .grid-item {
            background-color: lightblue;
            border: 1px solid #000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <div class="grid-item">1</div>
        <div class="grid-item">2</div>
        <div class="grid-item">3</div>
        <div class="grid-item">4</div>
        <div class="grid-item">5</div>
    </div>
</body>
</html>

4. Write CSS to show numbers as shown in the figure, without altering the html file.

without changing the html
/* Initialize the counter */
body {
    counter-reset: section;
}

/* Style for numbered items */
.numbered-item::before {
    counter-increment: section;
    content: counter(section) ". ";
    font-weight: bold; /* or any other styling you prefer */
}

/* Example styling for the items */
.numbered-item {
    margin: 10px 0;
}

Here is an example of how you would apply this CSS to a list of items:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Numbered Items</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <ul>
        <li class="numbered-item">Item 1</li>
        <li class="numbered-item">Item 2</li>
        <li class="numbered-item">Item 3</li>
        <li class="numbered-item">Item 4</li>
    </ul>
</body>
</html>


5. Explain the differnce between justify-items and justify-self using code examples.

answer:
justify-items :
aligns all the items in a grid container along the row axis.

justify-self:
 aligns a specific grid item along the row axis.

 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Justify Items</title>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            justify-items: center;
            gap: 10px;
            border: 1px solid #000;
        }
        .grid-item {
            background-color: lightblue;
            padding: 20px;
            border: 1px solid #000;
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <div class="grid-item">Item 1</div>
        <div class="grid-item">Item 2</div>
        <div class="grid-item">Item 3</div>
        <div class="grid-item">Item 4</div>
        <div class="grid-item">Item 5</div>
        <div class="grid-item">Item 6</div>
        <div class="grid-item">Item 7</div>
        <div class="grid-item">Item 8</div>
    </div>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Justify Self</title>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            border: 1px solid #000;
        }
        .grid-item {
            background-color: lightblue;
            padding: 20px;
            border: 1px solid #000;
        }
        .grid-item.special {
            justify-self: end; /* Aligns this specific item to the end */
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <div class="grid-item">Item 1</div>
        <div class="grid-item">Item 2</div>
        <div class="grid-item special">Special Item</div>
        <div class="grid-item">Item 4</div>
        <div class="grid-item">Item 5</div>
        <div class="grid-item">Item 6</div>
        <div class="grid-item">Item 7</div>
        <div class="grid-item">Item 8</div>
    </div>
</body>
</html>


             Responsive design

1. Create a simple webpage with header, a main content section, and a footer. Apply a media query that changes the background color of the header to blue when the screen width is less than 600px.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Webpage</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Header Section</h1>
    </header>
    <main>
        <p>This is the main content section.</p>
    </main>
    <footer>
        <p>Footer Section</p>
    </footer>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

header {
    background-color: #f4f4f4;
    padding: 20px;
    text-align: center;
}

main {
    padding: 20px;
    text-align: center;
}

footer {
    background-color: #f4f4f4;
    padding: 10px;
    text-align: center;
}

@media (max-width: 600px) {
    header {
        background-color: blue;
    }
}

2. Create an image gallery with three images in a row. Use media queries to adjust the layout to two images in a row for screens smaller than 800px and one image in a row for screens smaller than 500px.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Image Gallery</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Image Gallery</h1>
    </header>
    <main>
        <div class="gallery">
            <div class="gallery-item"><img src="tower.png" alt="Image 1"></div>
            <div class="gallery-item"><img src="tower.png" alt="Image 2"></div>
            <div class="gallery-item"><img src="tower.png" alt="Image 3"></div>
        </div>
    </main>
    <footer>
        <p>Footer Section</p>
    </footer>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

header {
    background-color: #f4f4f4;
    padding: 20px;
    text-align: center;
}

main {
    padding: 20px;
    text-align: center;
}

footer {
    background-color: #f4f4f4;
    padding: 10px;
    text-align: center;
}

.gallery {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
}

.gallery-item {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: calc(33.33% - 10px);
    box-sizing: border-box;
}

.gallery-item img {
    width: 100%;
    height: auto;
    display: block;
}

@media (max-width: 800px) {
    .gallery-item {
        flex-grow: 1;
        flex-shrink: 1;
        flex-basis: calc(50% - 10px);

    }
}

@media (max-width: 500px) {
    .gallery-item {
        flex-grow: 1;
        flex-shrink: 1;
        flex-basis: 100%;
 
    }
}

3. Create a navigation bar with five links. Apply a media query that converts the navigation into a vertical list for screens smaller than 768px and also changes the background color to gray.

Answer: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Navigation Bar</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <nav class="navbar">
    <ul class="nav-list">
      <li class="nav-item"><a href="#home">Home</a></li>
      <li class="nav-item"><a href="#about">About</a></li>
      <li class="nav-item"><a href="#services">Services</a></li>
      <li class="nav-item"><a href="#portfolio">Portfolio</a></li>
      <li class="nav-item"><a href="#contact">Contact</a></li>
    </ul>
  </nav>
</body>
</html>

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

.navbar {
  background-color: #333;
  overflow: hidden;
}

.nav-list {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: space-around;
}

.nav-item {
  margin: 0;
}

.nav-item a {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

.nav-item a:hover {
  background-color: #ddd;
  color: black;
}

/* Media Query for screens smaller than 768px */
@media screen and (max-width: 768px) {
  .nav-list {
    flex-direction: column;
    background-color: gray;
  }

  .nav-item a {
    text-align: left;
    padding: 10px;
  }
}

4.Create a grid-based layout containing four grid items which arranges them as the screen size changes.

Answer:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Grid Layout</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="grid-container">
    <div class="grid-item">Item 1</div>
    <div class="grid-item">Item 2</div>
    <div class="grid-item">Item 3</div>
    <div class="grid-item">Item 4</div>
  </div>
</body>
</html>

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f0f0f0;
}

.grid-container {
  display: grid;
  gap: 10px;
  padding: 10px;
  background-color: #fff;
  border: 1px solid #ddd;
}

.grid-item {
  background-color: #4CAF50;
  color: white;
  padding: 20px;
  text-align: center;
  font-size: 1.2em;
  border-radius: 5px;
}

.grid-container {
  grid-template-columns: repeat(2, 1fr);
}

/* Media Query for screens smaller than 768px */
@media screen and (max-width: 768px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}

5. Create the below-given layout using the flexbox in CSS, which should adapt itself on a mobile screen as per the given below output.

Answer:
 <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flexbox Layout</title>
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div class="flex-container">
        <div class="flex-item flex-item-1">Box 1</div>
        <div class=" flex-item flex-column">
            <div class="flex-item-2">Box 2</div>
            <div class="flex-item-3">Box 3</div>
        </div>
        <div class="flex-item flex-item-4">Box 4</div>
    </div>
</body>

</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

.flex-container {
    display: flex;
    /* flex-wrap: wrap;  */
    height: 100vh;
}

.flex-item {
    display: flex;
    font-size: 1.2em;
    flex-wrap: wrap;
}

.flex-item-1 {
    background-color: black;
    flex: 1 1 10%;
    color: white;
    height: 100%;
    justify-content: center;

}

.flex-column {
    flex-direction: column;
    flex: 1 1 80%;
    text-align: center;

}


.flex-item-2 {
    background-color: aqua;
    color: white;
    height: 50%;


}

.flex-item-3 {
    background-color: orange;
    color: white;
    height: 50%;

}

.flex-item-4 {
    background-color: black;
    height: 100%;
    color: white;
    /* flex-basis: 10%; */
    flex: 1 1 10%;
    justify-content: center;
}

@media (max-width: 770px) {
    .flex-container {
        flex-direction: column;
        height:fit-content
    }

    .flex-item-4{
        margin-top:500px;
    }
}

                      Tailwind CSS

* Note-all the assignments should be done using Tailwind CSS, set-up using Vite *

1. Create a User login page interface that closely resembles the provided image using Tailwind CSS. The is to ensure that your implementation captures every visual detail and layout aspect depicted in the image while maintaining a full mobile responsiveness.

Get the image from (https://www.freepik.com/free-phote/young-happy-woman-with-good-idea-sign-white-shirt-full-
portrait_10881326.html#page=2&query=login&position=11&from_view=search&track=sph)

Answer:
1. Set up Vite Project:
npm create vite@latest my-login-page --template vanilla
cd my-login-page
npm install

2. Install Tailwind CSS:
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

3. Configure Tailwind CSS:
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

4. Create the Tailwind CSS File:
@tailwind base;
@tailwind components;
@tailwind utilities;
 
 5. Include the Tailwind CSS File:
 import './styles.css'

6. Create the HTML File:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login Page</title>
    <link rel="stylesheet" href="style.css">
  <body>
    <div class="min-h-screen flex items-center justify-center bg-gray-100">
      <div class="bg-white p-8 rounded-lg mr-10 shadow-md w-full max-w-md">
        <h2 class="text-2xl font-bold mb-6 text-center">Login</h2>
        <form>
          <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input type="email" id="email" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring focus:border-blue-300" placeholder="you@example.com">
          </div>
          <div class="mb-6">
            <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <input type="password" id="password" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring focus:border-blue-300" placeholder="••••••••">
          </div>
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <input type="checkbox" id="remember_me" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
              <label for="remember_me" class="ml-2 block text-sm text-gray-900">Remember me</label>
            </div>
            <a href="#" class="text-sm text-blue-600 hover:underline">Forgot password?</a>
          </div>
          <button type="submit" class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition duration-200">Login</button>
        </form>
        <p class="text-center text-sm text-gray-500 mt-4">Don't have an account? <a href="#" class="text-blue-600 hover:underline">Sign up</a></p>
      </div>
      <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <img src="image1.png" alt="one woman with notebook eample">
      </div>
    </div>
    
  </body>
</html>

